syntax = "proto3";
option go_package = "github.com/paper-trade-chatbot/be-proto/order";
package order;
import "general/general.proto";
import "product/product.proto";
import "position/position.proto";

enum TransactionType {
    TransactionType_None = 0;
    TransactionType_OpenPosition = 1;
    TransactionType_ClosePosition = 2;
}

enum OrderStatus {
    OrderStatus_None = 0;
    OrderStatus_Pending = 1;
    OrderStatus_Failed = 2;
    OrderStatus_Finished = 3;
    OrderStatus_Cancelled = 5;
    OrderStatus_Rollbacked = 6;
}

message StartOpenPositionOrderReq {
    uint64 memberID = 1;
    string exchangeCode = 2;
    string productCode = 3;
    position.TradeType tradeType = 4;
    string amount = 5;
}

message StartOpenPositionOrderRes {
    uint64 id = 1;
}

message FinishOpenPositionOrderReq {
    uint64 id = 1;
    string unitPrice = 2;
    uint64 transactionRecordID = 3;
    int64 finishedAt = 4;
}

message FinishOpenPositionOrderRes {
    uint64 positionID = 1;
}

message StartClosePositionOrderReq {
    uint64 id = 1;
    string amount = 2;
}

message StartClosePositionOrderRes {
    uint64 id = 1;
}

message FinishClosePositionOrderReq {
    uint64 id = 1;
    uint64 positionID = 2;
    string unitPrice = 3;
    string closeAmount = 4;
    uint64 transactionRecordID = 5;
    int64 finishedAt = 6;
}

message FinishClosePositionOrderRes {}

message FailOrderReq {
    uint64 id = 1;
    optional uint64 failCode = 2;
    optional string remark = 3;
}

message FailOrderRes {}

message RollbackOrderReq {
    uint64 id = 1;
    uint64 rollbackerID = 2;
}

message RollbackOrderRes {}

message GetOrdersReq {
    repeated uint64 id = 1;
    repeated uint64 memberID = 2;
    repeated uint64 rollbackerID = 3;
    optional TransactionType transactionType = 4;
    optional product.ProductType type = 5;
    optional string exchangeCode = 6;
    optional string productCode = 7;
    optional position.TradeType tradeType = 8;
    repeated uint64 transactionRecordID = 9;
    optional int64 createdFrom = 10;
    optional int64 createdTo = 11;
    general.Pagination pagination = 12;
}

message Order {
    uint64 id = 1;
    uint64 memberID = 2;
    uint64 positionID = 3;
    OrderStatus orderStatus = 4;
    TransactionType transactionType = 5;
    product.ProductType type = 6;
    string exchangeCode = 7;
    string productCode = 8;
    position.TradeType tradeType = 9;
    string amount = 10;
    optional string unitPrice = 11;
    optional uint64 transactionRecordID = 12;
    int64 createdAt = 13;
    optional int64 finishedAt = 14;
    optional uint64 rollbackerID = 15;
    optional int64 rollbackedAt = 16;
    optional string remark = 17;
    optional uint64 failCode = 18;
}

message GetOrdersRes {
    repeated Order orders = 1;
    general.PaginationInfo paginationInfo = 2;
}

enum OrderProcess {
    OrderProcess_None = 0;
    OrderProcess_Waiting = 1;
    OrderProcess_Matching = 2;
    OrderProcess_Matched = 3;
    OrderProcess_Finished = 4;
    OrderProcess_Failed = 5;
    OrderProcess_Unknown = 6;
}

message UpdateOrderProcessReq {
    uint64 id = 1;
    OrderProcess orderProcess = 2;
    optional int64 expire = 3;
}

message UpdateOrderProcessRes {}

message GetOrderProcessReq {
    uint64 id = 1;
}

message GetOrderProcessRes {
    OrderProcess orderProcess = 1;
}

service OrderService {
    rpc StartOpenPositionOrder(StartOpenPositionOrderReq) returns (StartOpenPositionOrderRes);
    rpc FinishOpenPositionOrder(FinishOpenPositionOrderReq) returns (FinishOpenPositionOrderRes);
    rpc StartClosePositionOrder(StartClosePositionOrderReq) returns (StartClosePositionOrderRes);
    rpc FinishClosePositionOrder(FinishClosePositionOrderReq) returns (FinishClosePositionOrderRes);
    rpc FailOrder(FailOrderReq) returns (FailOrderRes);
    rpc RollbackOrder(RollbackOrderReq) returns (RollbackOrderRes);
    rpc GetOrders(GetOrdersReq) returns (GetOrdersRes);
    rpc UpdateOrderProcess(UpdateOrderProcessReq) returns (UpdateOrderProcessRes);
    rpc GetOrderProcess(GetOrderProcessReq) returns (GetOrderProcessRes);
}