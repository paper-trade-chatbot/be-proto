syntax = "proto3";
option go_package = "models/auth";

message LoginRequest {
    string account = 1;
    string password = 2;
    string imageId = 3;
    string userImageAnswer = 4;
    string ip = 5;
    bool isPaperTrading = 6;
    string deviceToken = 7;
    string fcmToken = 8;
}

message LoginResponse {
    string account = 1;
    string accessToken = 2;
    string renewToken = 3;
    bool firstLogin = 4;
    bool surveyDone = 5;
    string mainAccount = 6;
    string mainAccountGroup = 7;
    string role = 8 ;
    bool newDevice = 9;
    string email = 10;
    string nickname = 11;
}

message SocialLoginResponse {
    LoginResponse Login = 1;
    bool isNewUser = 2;
}

message LogoutRequest {
    string account = 1;
}

message LogoutResponse {
    string message = 1;
}

enum Channel {
    ChannelWEB = 0;
    ChannelAPP = 1;
    ChannelAPPAPPLE = 2;
}


message TokenRequest {
    string accessToken = 1;
    bool isPaperTrading = 2;
    Channel channel = 3;
    string ip = 4;
    string fcmToken = 5;
    string authCode = 6;
}

message TokenResponse {
    string mainAccount = 1;
    string subAccount = 2;
    bool isSubAccount = 3;
    string mainAccountRole = 4;
    string subAccountRole = 5;
    string mainAccountStatus = 6;
    string subAccountStatus = 7;
    string mainAccountGroup = 8;
    string subAccountGroup = 9;
    string nickname = 10;
}

message PermissionQuery{
    string group = 1;
}

message PermissionList{
    repeated string permission = 1;
}

message PermissionRequest{
    Group group = 1;
    repeated string permission = 2;
}

message PermissionResponse{
    string response = 1;
}

message CheckPermissionRequest{
    string account = 1;
    string method = 2;
    string path = 3;

}

message CheckPermissionResponse{
    bool isSubAccount = 1;
    string operator = 2;
    string modifier = 3;
}

message GetCaptchaRequest{
    string message = 1;
}

message GetCaptchaResponse{
    string imageId = 1;
    string imageBase64 = 2;
}

message DeleteTokenRequest{
    repeated string accounts = 1;
}

message DeleteTokenResponse{
    string response = 1;
}

message DeletePermissionRequest{
    string oldGroup = 1;
}

message DeletePermissionResponse{
    string response = 1;
}

message GetGroupsRequest{
    bool isPublic = 1;
    bool isPublicFlag = 2;
    bool forAgent = 3;
    bool forAgentFlag = 4;
}


message GetGroupsResponse{
    repeated Group group = 1;
}

message Group{
    string code = 1;
    string name = 2;
    string memo = 3;
    bool forAgent = 4;
    int64 createdAt = 5;
}




service AuthService {
    rpc Login(LoginRequest) returns (LoginResponse) {};
    rpc Logout(LogoutRequest) returns (LogoutResponse) {};
    rpc CheckToken(TokenRequest) returns (TokenResponse) {};
    rpc GetPermission(PermissionQuery) returns (PermissionList) {};
    rpc AddPermission(PermissionRequest) returns (PermissionResponse) {};
    rpc CheckPermission(CheckPermissionRequest) returns(CheckPermissionResponse){};
    rpc GetCaptcha(GetCaptchaRequest) returns(GetCaptchaResponse) {};
    rpc DeleteToken(DeleteTokenRequest) returns(DeleteTokenResponse) {};
    rpc DeletePermission(DeletePermissionRequest) returns(DeletePermissionResponse) {};
    rpc ParseGoogleToken(TokenRequest) returns (SocialLoginResponse) {};
    rpc ParseLineToken(TokenRequest) returns (SocialLoginResponse) {};
    rpc ParseFacebookToken(TokenRequest) returns (SocialLoginResponse) {};
    rpc ParseAppleToken(TokenRequest) returns (SocialLoginResponse) {};

    rpc GetAllGroups(GetGroupsRequest) returns(GetGroupsResponse){}
} 
