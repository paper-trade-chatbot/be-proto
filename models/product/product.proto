syntax = "proto3";
option go_package = "models/product";

enum ExchangeStatus {
  EXCHANGESTATUS_NONE = 0;
  EXCHANGESTATUS_ENABLED = 1;
  EXCHANGESTATUS_DISABLED = 2;
}

enum ExchangeDisplay {
  EXCHANGEDISPLAY_NONE = 0;
  EXCHANGEDISPLAY_ENABLED = 1;
  EXCHANGEDISPLAY_DISABLED = 2;
}

enum ExchangeRead {
  EXCHANGEREAD_NONE = 0;
  EXCHANGEREAD_ENABLED = 1;
  EXCHANGEREAD_DISABLED = 2;
}

enum ContractStatus {
  CONTRACTSTATUS_NONE = 0;
  CONTRACTSTATUS_ENABLED = 1;
  CONTRACTSTATUS_DISABLED = 2;
}

enum ContractDisplay {
  CONTRACTDISPLAY_NONE = 0;
  CONTRACTDISPLAY_ENABLED = 1;
  CONTRACTDISPLAY_DISABLED = 2;
}

enum ContractRead {
  CONTRACTREAD_NONE = 0;
  CONTRACTREAD_ENABLED = 1;
  CONTRACTREAD_DISABLED = 2;
}

enum ProductDisplay {
  PRODUCTDISPLAY_NONE = 0;
  PRODUCTDISPLAY_ENABLED = 1;
  PRODUCTDISPLAY_DISABLED = 2;
}

enum ExchangeCode {
  EXCHANGECODE_NONE = 0;
}

message ProductEmpty {}

message ProductAccountInfo {
    string mainAccount = 1;
    string mainAccountRole = 2;
    string subAccount = 3;
    string subAccountRole = 4;
    string ip = 5;
}

message Exchange {
  string exchangeCode = 1;
  string exchangeName = 2;
  string timeZone = 3;
  ExchangeStatus exchangeStatus = 4;
  ExchangeDisplay exchangeDisplay = 5;
  string tradingTime = 6;
  string exceptionTime = 7;
  string product = 8;
  int32 exchangeType = 9;
  string orderTime = 10;
  string exchangeTime = 11;
  string location = 12;
  int32 startHour = 13;
  int32 startMinute = 14;
  int32 endHour = 15;
  int32 endMinute = 16;
}

message QueryExchangeRequest {
  string exchangeCode = 1;
  int32 exchangeType = 3;
  ExchangeStatus status = 2;
  ExchangeDisplay display = 5;
  bool convertToTaiwanTime = 4;
}

message QueryExchangeResponse {
  repeated Exchange exchanges = 1 ;
}

message QuerySearchFactorRequest {
  int32 productType = 1;
}

message QuerySearchFactorResponse {
  double highPrice = 1 ;
  double lowPrice = 2 ;
  double highVolume = 3 ;
  double lowVolume = 4 ;
  double highFluctuation = 5 ;
  double lowFluctuation = 6 ;
  double highMarkup = 7 ;
  double lowMarkup = 8 ;
}

message Contract {
  string exchangeCode = 1;
  string contractCode = 2;
  string contractName = 3;
  string contractPinyi = 4;
  string futuresVarietyCode = 5;
  double instrumentMultiple = 6;
  double priceUnit = 7;
  ContractStatus contractStatus = 8;
  ContractDisplay contractDisplay = 9;
  ContractRead contractRead = 10;
  int32 productType = 11;
  double tickUnit = 12;
  string currency = 13;
  double margin = 14;
  int64 updatedAt = 15;
  string iconID = 16;
}

message BackQueryProductsRequest {
  string contractCode = 1;
  string futuresVarietyCode = 2;
  ContractStatus status = 3;
  ProductDisplay display = 13;
  ContractRead   read =15;
  int32 productType = 14;
  string exchangeCode = 4;
  double highPrice = 5 ;
  double lowPrice = 6 ;
  double highVolume = 7 ;
  double lowVolume = 8 ;
  double highFluctuation = 9 ;
  double lowFluctuation = 10 ;
  double highMarkup = 11 ;
  double lowMarkup = 12 ;
}

message QueryAllProductPinYinRequest {
  int32 productType = 1 ;
  string pinYin = 2 ;
  ProductDisplay display = 3;
}

message QueryByProductCodeRequest {
  int32 productType = 1 ;
  string pinYin = 2 ;
  ProductDisplay display = 3 ;
}

message QuerySearchRecordRequest {
  string symbol = 1 ;
  string account = 2;
  string exchangeCode = 3;
}

message QuerySearchRecordResponse {
  repeated Symbol records = 1 ;
  string message = 2;
}

message QueryConditionParamsRequest {
  int32 productType = 1 ;
  ProductDisplay display = 2;
}

message QueryConditionParamsResponse {
  int32 productType = 1 ;
  repeated string exchangeCodes = 2 ;

  //技術面
  double highVolume = 3 ;
  double lowVolume = 4 ;
  double highMarkup = 5 ;
  double lowMarkup = 6 ;

  //股票
  repeated int32 sector = 8;
  //基本面
  int64 totalCaptialH = 9;
  int64 totalCaptialL = 10;
  int64 grossProfitH = 11;
  int64 grossProfitL = 12;
  int64 netIncomeH = 13;
  int64 netIncomeL = 14;
  int64 netLiabiltyH = 15;
  int64 netLiabiltyL = 16;

  //期貨
  repeated int32 futuresVarietyCode = 7;
}

message QueryAllProductConditionRequest {
  int32 productType = 1 ;
  repeated string exchangeCodes = 2 ;
  ProductDisplay display = 21;

  //技術面
  double highVolume = 3 ;
  double lowVolume = 4 ;
  double highMarkup = 5 ;
  double lowMarkup = 6 ;
  int32 kdjSignal = 17;
  int32 macdSignal = 18;
  int32 bollSignal = 19;
  int32 rsiSignal = 20;

  //期貨
  repeated int32 futuresVarietyCode = 7;

  //股票
  repeated int32 sector = 8;
  int64 totalCaptialH = 9;
  int64 totalCaptialL = 10;
  int64 grossProfitH = 11;
  int64 grossProfitL = 12;
  int64 netIncomeH = 13;
  int64 netIncomeL = 14;
  int64 netLiabiltyH = 15;
  int64 netLiabiltyL = 16;
}


message StockProduct {
  string exchangeCode = 1;
  string productCode = 2;
  string productName = 3;
  string productPinyi = 4;
  string currency = 7;
  double tickUnit = 9 ;
  ContractStatus contractStatus = 5;
  ProductDisplay display = 10;
  double closePrice = 6 ;
  string iconID = 8 ;
}

message GetPrizePoolProductReq {
  string pattern = 1;
  int32 productType = 2;
}

message GetPrizePoolProductRes {
  repeated PrizePoolProduct prizePoolProducts = 1;
}

message PrizePoolProduct {
  string exchangeCode = 1;
  string productCode = 2;
  double closePrice = 3;
  int32 productType = 4;
}

message QueryStockProductRequest {
  string productCode = 1;
  string pattern = 2 ;
  ContractStatus status = 3;
  repeated string exchangeCodes = 4;
}

message QueryStockProductResponse {
  repeated StockProduct products = 1;
}

message BackQueryProductsResponse {
  repeated Contract contracts = 1 ;
  repeated Contract stockProducts = 2 ;
  repeated Contract cryptoProduct = 3 ;
  repeated Contract foreignExchangeProduct = 4 ;
}

message ExchangeTradingTimeRequest {
  string exchangeCode = 1;
  string tradingTime = 2;
  string exceptionTime = 3;
}

message ExchangeTradingTimeResponse {
  string message = 1;
}

message ExchangeStatusRequest {
  repeated string exchangeCode = 1;
  ExchangeStatus status = 2;
  int32 productType = 3;
}

message ExchangeStatusResponse {
  string message = 1;
}

message ExchangeDisplayRequest {
  repeated string exchangeCode = 1;
  ExchangeDisplay display = 2;
  int32 productType = 3;
}

message ExchangeDisplayResponse {
  string message = 1;
}

message ExchangeReadRequest {
  repeated string exchangeCode = 1;
  ExchangeRead read = 2;
  int32 productType = 3;
}

message ExchangeReadResponse {
  string message = 1;
}

message ContractStatusRequest {
  repeated string contractCode = 1;
  ContractStatus status = 2;
  int32 productType = 3;
}

message ContractStatusResponse {
  string message = 1;
}

message ContractDisplayRequest {
  repeated string contractCode = 1;
  ContractDisplay display = 2;
  int32 productType = 3;
}

message ContractDisplayResponse {
  string message = 1;
}

message ContractReadRequest {
  repeated string contractCode = 1;
  ContractRead read = 2;
  int32 productType = 3;
}

message ContractReadResponse {
  string message = 1;
}

message QuerySelfSelectionGroupsRequest {
  string custNumber = 1;
}

message QuerySelfSelectionGroupsResponse {
  string custNumber = 1;
  string groups = 2;
  repeated SelectionGroup selectionGroup = 3;
}

message SelectionGroup {
  string name = 1;
  repeated Symbol selectionList = 2;
}

message SelfSelectionGroupsRequest {
  string custNumber = 1;
  string groups = 2;
}

message SelfSelectionGroupsResponse {
  string message = 1;
}

message ExchangeListRequest{
}

message ExchangeListResponse{
  repeated Exchange exchanges = 1;
}

message FuturesVarietyCodeRequest{
}

message FuturesVarietyCodeResponse{
  repeated FuturesVarietyCode futuresVarietyCodes = 1;
}

message FuturesVarietyCode{
  string code = 1;
  string name = 2;
  int32  amount = 3;
  string product = 4;
}


message ProductListRequest{
}

message ProductListResponse{
  repeated Product products = 1;
}

message CryptoProductListResponse{
  repeated CryptoProduct products = 1;
  string successMsg = 5;
}

message CryptoProduct{
  string exchangeCode = 1;
  string productCode = 2;
  string productName = 3;
  string currency = 4;
  double tickUnit =6;
  ContractStatus contractStatus = 5;
  ProductDisplay display = 10;
  string productPinyi = 7;
  string iconID = 8 ;
}

message Product{
  string code = 1;
  string name = 2;
  int32  amount = 3;
}

enum ProductCategory {
  PRODUCTCATEGORY_NONE = 0;
  FUTURES_HOT = 1;
  STOCK_HOT = 2;
  CRYPTO_HOT = 3;
  FOREX_HOT = 4;
  STOCK_DOWJONES = 5;
  STOCK_NASDAQ = 6;
  STOCK_SP500 = 7;
}

message HotListRequest{
  ProductCategory category = 1;
  ProductDisplay display = 2;
}

message HotListResponse{
  repeated Symbol products = 1;
}
message Symbol{
  string exchangeCode = 1;
  string symbol = 2 ;
}

message SymbolDetail{
  string exchangeCode = 1;
  string symbol = 2 ;
  string symbolName = 3;
  string currency = 4;
  double tickUnit =5;
  ContractStatus contractStatus = 6;
  ProductDisplay display = 13;
  string iconID = 7 ;
  Quote latestQuote = 10;
  int32 productType = 11;
  double minimumOrder = 12;

//contract//
  double priceUnit = 8;
  double margin = 9;

//stock//
  int64 sharesOutstanding = 14;

//forex//
  double buyOrderOvernightInterestPointValue = 15;
  double sellOrderOvernightInterestPointValue = 16;
  double transUSD = 17;
}

message QueryProductRequest{
  repeated string symbols = 1;
}


message QueryAllProductResponse{
  repeated SymbolDetail symbols = 1;
}

message PennyStockListRequest{
  
}

message PennyStockListResponse{
  repeated StockProduct pennyStockList = 1;
}

message Quote {
  int64 time = 1;
  string productId = 2;
  double yesterdayPrice = 3;
  double openPrice= 4;
  double highPrice= 5;
  double lowPrice= 6;
  double closePrice= 7;
  double quantity= 8;
  double buyPrice= 9;
  double buyQuantity = 10;
  double sellPrice= 11;
  double sellQuantity= 12;
  double volume= 13;
  double priorSettle= 14;
}

message ProductMarginRequest{

  repeated string exchangeCode = 1;
  repeated string contractCode = 2;
  repeated string margin = 3;
  ProductAccountInfo operatorInfo = 4;

}

message ProductMarginResponse{

}

message ProductsTradingTimeRequest{
  repeated string symbol = 1;
}

message ProductsTradingTimeResponse{
  repeated ProductTradingTime products = 1;
}

message ProductTradingTime{
  string symbol = 4;
  string exchangeCode =5 ;
  int64 openTime = 1;
  int64 closeTime = 2;
  double timeZone = 3;
  int64 nextOpenTime = 6;
  int64 nextCloseTime = 7;
}

message CompanyInfoReq{
  repeated string productCode = 1;
}

message CompanyInfoRes{
   repeated CompanyInfo companyInfo = 1;
}

message CompanyInfo{
  string productCode = 1;
  string exchangeCode = 2;
  string industry = 3;
  string website = 4;
  string ipoDate = 5;
  string address = 6;
  string zip = 7;
  string phone = 8;
  string description = 9;
  string industryCN = 10;
  string descriptionCN = 11;
}

message HotStockProductList {
  repeated StockProduct products = 1;
}

message QueryRecommendListRequest{
  string animal = 1;
  string tracking = 2;
  ProductDisplay display = 3;
}

message QueryRecommendListResponse{
  repeated RecommendStock recommendStocks = 1;
  TradeVolume tradeVolume = 2;
  PriceUpDownPercentage priceUpDownPercentage = 3;
}

message TradeVolume {
  int64 high = 1;
  int64 low = 2;
}

message PriceUpDownPercentage {
  double high = 1;
  double low = 2;
}

message RecommendStock{
  string symbol = 1;
  int64 animal = 2;
  string exchangeCode = 3;
  int64 volume = 4;
  double updownPercentage = 5;
}

message FuturesProductInfoReq{
  repeated string productCode = 1;
}

message FuturesProductInfoRes{
  repeated FuturesProductInfo futuresProductInfo = 1;
}

message FuturesProductInfo{
  string productCode = 1;
  string exchangeCode = 2;
  string country = 3;
  string futuresVarietyCode = 4;
  string currency = 5;
  string contractSize = 6;
  double tickUnit = 7;
  string tradingTime = 8;
  string locationTimeZone = 9;
  double margin = 10;
  string tradingTimeZone = 11;
  string website = 12;
  string contractValue = 16;

  string exchangeCodeCN = 17;
  string futuresVarietyCodeCN = 18;
  string contractSizeCN = 19;
  string tradingTimeCN = 20;
  string locationTimeZoneCN = 21;
  string tradingTimeZoneCN = 22;
  string contractValueCN = 23;
}

message CreateDefaultSelfSelectionGroupsRequest {
  string account = 1;
}

message DeleteDefaultSelfSelectionGroupsRequest {
  string account = 1;
}

message AlterTickQuoteRequest{
  string productCode = 1;
  string exchangeCode = 2;
  double closePrice = 3 ;
  double originPrice = 4;
  string operator = 5;
  int32  productType = 6;
}

message AlterTickQuoteResponse{
  string message = 1;
}

message GetCryptoInfoRequest{
  string productCode = 1;
}

message GetCryptoInfoResponse{
  string cryptoIcon = 1;
  string cryptoName = 2;
  double minimumOrder = 3;
  string description = 4;
  string descriptionCN = 5;
  string website = 6;
}

message GetForexInfoRequest{
  string productCode = 1;
}

message GetForexInfoResponse{
  string forexIcon = 1;
  string forexName = 2;
  string quoteCurrencyCode = 3;
  double tickUnit = 4;
  double minimumOrder = 5;
  double orderValue = 6;
  string margin=7;
  string overnightInterest= 8;
  string overnightInterestEN= 9;
  double buyOrderOvernightInterestPointValue = 10;
  double sellOrderOvernightInterestPointValue = 11;
}

message IncomeStatement {
  string period = 1;
  double revenue = 2;
  double netIncome = 3;
  double eps = 4;
  string date = 5;
  string symbol = 6;
}

message BalanceSheet {
  string period = 1;
  double totalAssets = 2;
  double totalLiabilities = 3;
  string date = 4;
  string symbol = 5;
}

message GetFinancialInfoRequest {
  string productCode = 1;
  int32 productType = 2;
}

message GetFinancialInfoResponse {
  repeated IncomeStatement annualIncome = 1;
  repeated IncomeStatement quarterIncome = 2;
  repeated BalanceSheet annualBalance = 3;
  repeated BalanceSheet quarterBalance = 4;
}

enum HeatMapSortRange {
    RANGE_NONE = 0;
    RANGE_VOLUME_HOUR = 1;
    RANGE_VOLUME_DAY = 2;
    RANGE_VOLUME_WEEK = 3;
    RANGE_VOLUME_MONTH = 4;
} 

message GetProductHeatMapRequest {
    string category = 1;
    HeatMapSortRange range = 2;
    int32 maxDataLength = 3;
}

message ProductHeatMap {
    string exchange = 1;
    string productCode = 2;
    double volume = 3;
}

message ProductHeatMapList {
    repeated ProductHeatMap list = 1;
}

message GetExchangeAndVarietyCodeReq {
  int64 id = 1;
}

message GetExchangeAndVarietyCodeRes {
  repeated string varietyCode = 1;
  repeated ExchangeAndCountry exchangeAndCountry = 2;
}
message ExchangeAndCountry {
  string exchangeCode = 1;
  string country = 2;
  int32 exchangeType = 3;
}

message NewProduct {
		string productCode = 1;
		int32 productType = 2;
		string exchangeCode = 3;
		string productPinyin = 4;
		string tickUnit = 5;
		string currency = 6;
		string minimumOrder = 7;
		string iconID = 8;
		string website = 9;

		// futures product//
		string contractCode = 10;
		string productName = 11;
		string futuresVarietyCode = 12;
		string futuresVarietyCodeCN = 34;
		string margin = 13;
		string priceUnit = 14;
		string exchangeCodeCN = 15;
		string country = 16;
		string contractSize = 17;
		string contractSizeCN = 18;
		string contractValue = 19;
		string contractValueCN = 20;
		string tradingTime = 21;
		string tradingTimeCN = 22;
		string locationTimeZone = 23;
		string locationTimeZoneCN = 24;

		// stocks product//
    int32 sectorID = 27;
    string industry = 35;
    string industryCN = 36;
    string ipoDate = 37;
    string address = 38;
    string zip = 39;
    string phone = 40;
    string shares = 41;

		// crypto product//
		string cryptoName = 25;
		string productNameTW = 26;
		string description = 28;
		string descriptionCN = 29;

		// forex product//
		string orderValue = 31;
		string buyOrderOvernightInterestPointValue = 32;
		string sellOrderOvernightInterestPointValue = 33;
}

message CreateNewProductResponse {
  string message = 1;
}

message StockDividendsHistoryRequest {
  int64 dateStart = 2;
  int64 dateEnd = 3;
  repeated string orderBy = 4;
  repeated string orderDirection = 5;
  ProductPagination pagination = 6;

}

message StockDividendsHistoryResponse {
  repeated StockDividendsHistory records = 1;
  ProductPaginationInfo paginationInfo = 2;
}


message ProductPagination {
  int32 page = 1;
  int32 pageSize = 2;
}

message ProductPaginationInfo {
  int32 currentPage = 1;
  int32 nextPage = 2 ;
  int32 previousPage = 3;
  int32 totalPages = 4;
  int32 totalRows = 5;
}

message StockDividendsHistory{
  string productCode = 1;
  string productName = 2;
  string exchangeCode = 3;
  string dividendPerShare = 4;
  int64 exDividendDate = 5;
  int64 recordDate = 6;
  int64 paymentDate = 7;
  int64 createdAt = 8;
}

message ExchangeTradingHours {
    string exchangeCode = 1;
    int64 beginAtUnix = 2;
    int64 endAtUnix = 3;
    int64 nextBeginAtUnix = 4;
    int64 prevBeginAtUnix = 5;
    int64 prevEndAtUnix = 6;
    double timeZone = 7;
}

message ExchangeTradingHoursList {
    repeated ExchangeTradingHours info = 1;
    bool isDaily = 2;
}

enum ExchangeHolidayType {
    ExchangeHolidayTypeNone = 0;
    ExchangeHolidayTypeFullDay = 1;
    ExchangeHolidayTypeHalfDay = 2;
}

message ExchangeHoliday {
    int64 id = 1;
    string exchangeCode = 2;
    ExchangeHolidayType type = 3;
    string name = 4;
    string memo = 5;
    int64 beginDateUnix = 6;
    int64 endDateUnix = 7;
    string closeTime = 8;
    int64 updatedAtUnix = 9;
}

message CreateExchangeHolidayReq {
    repeated ExchangeHoliday holidays = 1; 
}

message GetExchangeHolidayListReq {
    string exchangeCode = 1;
}

message ExchangeHolidayList {
    repeated ExchangeHoliday holidays = 1;
}

message UpdateExchangeHolidayReq {
    int64 id = 1;
    string updater = 2;
}

message DeleteExchangeHolidayReq {
    int64 id = 1;
}

message GetAlterTickRecordReq {
  int64 dateStart = 1;
  int64 dateEnd = 2;
  repeated string operator = 3;
  repeated int32 productType = 4;
  repeated string productCode = 5;
  repeated string orderBy = 6;
  repeated string orderDirection = 7;
  ProductPagination pagination = 11;

}

message GetAlterTickRecordRes {
  repeated alterTickRecord alterTickRecords = 1;
  ProductPaginationInfo paginationInfo = 2;
}

message alterTickRecord{
  int64 createdAt = 1;
  string operator = 2;
  int32 productType = 3;
  string productCode = 4;
  string quoteBefore = 5;
  string quoteAfter = 6;
}


service ProductService {
  rpc QueryAllProductsPinYin(QueryAllProductPinYinRequest) returns (HotListResponse){};
  rpc QueryAllProductsCondition(QueryAllProductConditionRequest) returns (HotListResponse){};
  rpc QueryByProductCode(QueryByProductCodeRequest) returns (HotListResponse){};
  rpc QueryConditionParams(QueryConditionParamsRequest) returns (QueryConditionParamsResponse){};
  rpc ModifySearchRecord(QuerySearchRecordRequest) returns (QuerySearchRecordResponse){};
  rpc QuerySearchRecord(QuerySearchRecordRequest) returns (QuerySearchRecordResponse){};
  rpc BackQueryProducts(BackQueryProductsRequest) returns (BackQueryProductsResponse){};
  rpc QueryStockProduct(QueryStockProductRequest) returns (QueryStockProductResponse){};
  rpc GetPrizePoolProduct(GetPrizePoolProductReq) returns (GetPrizePoolProductRes){};
  rpc QueryAllProducts(QueryProductRequest) returns (QueryAllProductResponse){};
  rpc ModifyContractStatus(ContractStatusRequest) returns (ContractStatusResponse){};
  rpc ModifyContractDisplay(ContractDisplayRequest) returns (ContractDisplayResponse){};
  rpc ModifyContractRead(ContractReadRequest) returns (ContractReadResponse){};
  rpc QuerySelfSelectionGroups(QuerySelfSelectionGroupsRequest) returns (QuerySelfSelectionGroupsResponse){};
  rpc ModifySelfSelectionGroups(SelfSelectionGroupsRequest) returns (SelfSelectionGroupsResponse){};
  rpc CreateDefaultSelfSelectionGroups(CreateDefaultSelfSelectionGroupsRequest) returns (ProductEmpty){};
  rpc DeleteDefaultSelfSelectionGroups(DeleteDefaultSelfSelectionGroupsRequest) returns (ProductEmpty){};
  rpc FuturesVarietyCodeList(FuturesVarietyCodeRequest)returns(FuturesVarietyCodeResponse);
  rpc ProductList(ProductListRequest)returns(ProductListResponse);
  rpc CryptoProductList(ProductListRequest)returns(CryptoProductListResponse);
  rpc ForeignExchangeProductList(ProductListRequest)returns(CryptoProductListResponse);
  rpc HotList(HotListRequest)returns(HotListResponse);
  rpc PennyStockList(PennyStockListRequest) returns (PennyStockListResponse){};
  rpc ModifyProductMargin(ProductMarginRequest) returns (ProductMarginResponse){};
  rpc ProductsTradingTime(ProductsTradingTimeRequest) returns (ProductsTradingTimeResponse){};
  rpc GetStockCompanyInfo(CompanyInfoReq) returns (CompanyInfoRes){};
  rpc GetHotStockProduct(ProductEmpty) returns (HotStockProductList){};
  rpc QueryRecommendList(QueryRecommendListRequest) returns(QueryRecommendListResponse);
  rpc GetFuturesProductInfo(FuturesProductInfoReq) returns (FuturesProductInfoRes){};
  rpc GetCryptoInfo(GetCryptoInfoRequest) returns (GetCryptoInfoResponse);
  rpc GetForexInfo(GetForexInfoRequest) returns (GetForexInfoResponse);
  rpc AlterTickQuote(AlterTickQuoteRequest) returns (AlterTickQuoteResponse){};
  rpc GetFinancialInfo(GetFinancialInfoRequest) returns (GetFinancialInfoResponse);
  rpc GetProductHeatMap(GetProductHeatMapRequest) returns (ProductHeatMapList) {};
  rpc CreateNewProduct(NewProduct) returns(CreateNewProductResponse) {};
  rpc GetStockDividendsHistoryRecords(StockDividendsHistoryRequest) returns(StockDividendsHistoryResponse){};

  rpc QueryExchange(QueryExchangeRequest) returns (QueryExchangeResponse){};
  rpc QueryStockExchange(QueryExchangeRequest) returns (QueryExchangeResponse){};
  rpc ExchangeList(ExchangeListRequest)returns(ExchangeListResponse);
  rpc GetExchangeAndVarietyCode(GetExchangeAndVarietyCodeReq) returns(GetExchangeAndVarietyCodeRes){};
  rpc GetExchangeTradingHours(ExchangeTradingHoursList) returns (ExchangeTradingHoursList){};
  rpc ModifyExchangeStatus(ExchangeStatusRequest) returns (ExchangeStatusResponse){};
  rpc ModifyExchangeDisplay(ExchangeDisplayRequest) returns (ExchangeDisplayResponse){};
  rpc ModifyExchangeRead(ExchangeReadRequest) returns (ExchangeReadResponse){};
  rpc ModifyExchangeTradingTime(ExchangeTradingTimeRequest) returns (ExchangeTradingTimeResponse){};
  rpc CreateExchangeHoliday(CreateExchangeHolidayReq) returns (ProductEmpty) {};
  rpc GetExchangeHolidayList(GetExchangeHolidayListReq) returns (ExchangeHolidayList) {};
  rpc UpdateExchangeHoliday(UpdateExchangeHolidayReq) returns (ProductEmpty) {};
  rpc DeleteExchangeHoliday(DeleteExchangeHolidayReq) returns (ProductEmpty) {};

  rpc GetAlterTickRecord(GetAlterTickRecordReq) returns (GetAlterTickRecordRes) {};
}
