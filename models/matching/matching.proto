syntax = "proto3";
option go_package = "models/matching";

message MatchingAlterTickReq {
  string productId = 1;
  string buyPrice = 2;
  string sellPrice = 3;
  string closePrice = 4;
}

message MatchingAlterTickRes {
}

message NewOrderReq {
  string ClOrderID = 1;
  string SysOrderID = 2;
  int32 Leverage = 3;
  string TradingMemberNumber = 4;
  string CustNumber = 5;
  string SeatID = 6;
  string ExchangeCode = 7;
  string ContractCode = 8;
  int32 Side = 9;
  int32 OrderType = 10;
  int32 OpenClose = 11;
  string OrderPrice = 12;
  string OrderQty = 13;
  string OrderFracSize = 14;
  bool FracShareFlag = 15;
  string CommitPrice = 16;
  string CommitQty = 17;
  string StopLossPrice = 18;
  string GainProfitPrice = 19;
  string Turnover = 20;
  int32 TimeInForce = 21;
  int32 OrderStatus = 22;
  string SettledProfit = 23;
  int32 ForcedLiquidationReasonCode = 24;
  int64 CommitDateUnix = 25;
  int64 TradingDateUnix = 26;
  int32 ForceDropFlag = 27;
  string IP = 28;
  string MAC = 29;
  string OrderSystem = 30;
  string OperatorNo = 31;
  int64 CreatedAtUnix = 32;
  int64 UpdatedAtUnix = 33;
  int32 Action = 34;
  string ModifyOrderPrice = 35;
  string ModifyOrderQty = 36;
  string ModifyOrderFracSize = 37;
  bool ModifyFracShareFlag = 38;
  string Fee = 39;
  int32 ProductType = 40;
}

message NewOrderRes {
  string profit = 1;
  string closePrice = 2;
}

message Empty{}

service MatchingService{
  rpc MatchingAlterTick(MatchingAlterTickReq) returns (MatchingAlterTickRes) {};
  rpc NewOrder(NewOrderReq) returns (NewOrderRes);
}