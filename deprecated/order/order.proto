syntax = "proto3";

option go_package = "models/order";

enum Side {
    SIDE_NONE = 0;
    BUY = 1;
    SELL = 2;
}
enum OpenClose {
    OPENCLOSE_NONE = 0;
    OPEN = 1;
    CLOSE = 2;
    AUTO = 3;
}
enum TimeInForce {
    TIMEINFORCE_NONE = 0;
    ROD = 1;
    IOC = 2;
}
enum OrderType {
    ORDERTYPE_NONE = 0;
    MARKET = 1;
    LIMIT = 2;
    SYSTEM = 4;
}

enum OrderStatus {
    ORDERSTATUS_NONE = 0;
    ORDERSTATUS_UNSETTLED = 1;
    ORDERSTATUS_SETTLED = 2;
    ORDERSTATUS_FAILED = 3;
}

enum RiskAction {
    RISKACTION_NONE = 0;
    RISKACTION_SYSTEM_FORCE_CLOSE = 1;
    RISKACTION_USER_FORCE_CLOSE = 2;
    RISKACTION_CANCEL_ORDER = 3;
    RISKACTION_FIX_QUOTE = 4;
}

enum TimeInterval {
    TIMEINTERVAL_NONE = 0;
    TIMEINTERVAL_DAY = 1;
    TIMEINTERVAL_MONTH = 2;
}

enum OrderDashboardSearchType {
    ORDERDASHBOARDSEARCHTYPE_NONE = 0;
    ORDERDASHBOARDSEARCHTYPE_DAILY = 1;
    ORDERDASHBOARDSEARCHTYPE_WEEKLY = 2;
    ORDERDASHBOARDSEARCHTYPE_MONTHLY = 3;
    ORDERDASHBOARDSEARCHTYPE_UNLIMITED = 4;
}

message OrderPagination {
    int32 page = 1;
    int32 pageSize = 2;
}

message OrderPaginationInfo {
    int32 currentPage = 1;
    int32 nextPage = 2 ;
    int32 previousPage = 3;
    int32 totalPages = 4;
    int32 totalRows = 5;
}

message FuturesOrderRequest {
    string custNumber = 1;
    string exchangeCode = 2;
    string contractCode = 3;
    Side side = 4;
    OpenClose openClose = 5;
    OrderType orderType = 6;
    string orderPrice = 7;
    string orderQty = 8;
    int32 stopLossFlag = 17;
    string stopLossPrice = 12;
    string gainProfitPrice = 13;
    TimeInForce timeInForce = 9;
    string ip = 10;
    string clOrderId = 11;
    int32 leverage = 16;
    int32 stopLossTakeProfit = 18;
}

message FuturesOrderResponse {
    string profit = 1;
    string closePrice = 2;
}

message AccountPositionRequest {
    string custNumber = 1;
}

message AccountPositionResponse {
    string custNumber = 1;
    repeated Position positions = 2;
    double balance = 3;
}

message PositionRequest {
    repeated string custNumbers = 1;
    repeated string contractCodes = 2;
    OrderPagination pagination = 3;
}

message ModifyPositionStopLossRequest {
    string custNumbers = 1;
    string contractCodes = 2;
    Side side = 3;
    double stopLossPrice = 4;
    double gainProfitPrice = 5;
    int32 productType = 6;
}

message ModifyPositionStopLossResponse {
    string message = 1;
}

message PositionDetail {
    string custNumber = 1;
    Position position = 2;
}

message PositionArray {
    repeated PositionDetail positionDetails = 1;
    OrderPaginationInfo paginationInfo = 2;
}

message Position {
    string contractCode = 1;
    string exchangeCode = 2;
    Side side = 3;
    string openPrice = 4 ;
    string positionQty = 5;
    string unrealizedProfit = 6;
    string currentProfit = 7;
    string averagePrice = 8;
    string marketPrice = 9;
    string stopLossPrice = 10;
    string gainProfitPrice = 11;
    int64 leverage = 12;
    int32 productType = 13;
    string latestValue = 14;
    string productNameEN = 15;
    string selfPaidMargin = 19;

    //forEx//
    int32 forexType = 16;
    string forexQuote = 17;
    string forexExchange = 18;

    int64 time = 20;
}

message BackPosition {
    string account = 1;
    string accountName = 2;
    string upline = 3;
    string uplineName = 4;
    Position position = 5;
    string userId = 6;
    string wallet = 7;
}

message BackPositionArray {
    repeated BackPosition backPositions = 1;
    OrderPaginationInfo paginationInfo = 2;
}

message Order {
    string clOrderId = 1;
    string exchangeCode = 2;
    string contractCode = 3;
    Side side = 4;
    OpenClose openClose = 5;
    OrderType orderType = 6;
    string orderPrice = 7;
    string orderQty = 8;
    string commitPrice = 9;
    string commitQty = 10;
    string turnover = 11;
    TimeInForce timeInForce = 12;
    string ip = 13;
    OrderStatus orderStatus = 14;
    string commitDate = 15;
    string tradingDate = 16;
    int64 CreatedAt = 17;
    int64 UpdatedAt = 18;
    string settledProfit = 19;

    string openPrice = 20;
    string closeProfit = 21;
    string fee = 22;
    string interest = 23;
    string tradeTax = 24;
    string totalTurnover = 25;
    string sysOrderId = 26;

    string stopLossPrice = 27;
    string gainProfitPrice = 28;

    string orderFracSize = 29;
    bool fracShareFlag = 30;
    int32 productType = 31;
}

message QueryOrderRequest {
    string custNumber = 1;
    OrderStatus orderStatus = 2;
}

message QueryOrderResponse {
    string custNumber = 1;
    repeated Order orders = 2 ;
}

message OrderRecord {
    string custNumber = 1;
    Order order = 2;
    double currentPrice = 3;
    string userId = 4;
}

message BackOrderRecord {
    string account = 1;
    string accountName = 2;
    string upline = 3;
    string uplineName = 4;
    Order order = 5;
    string userId = 6;
}

message OrderRecordRequest {
    repeated string custNumbers = 1;
    int64 dateStart = 2;
    int64 dateEnd = 3;
    repeated string contractCodes = 4;
    repeated OrderStatus orderStatus = 5;
    Side side = 6;
    repeated string orderBy = 7;
    repeated string orderDirection = 8;
    repeated OrderType orderType = 9;
    OpenClose openClose = 10;
    OrderPagination pagination = 11;
    repeated string clOrderIds = 12;
    repeated string sysOrderIds = 13;
    string clOrderIdLike = 14;
    string sysOrderIdLike = 15;
    repeated int32 productType = 16;
}

message OrderRecordArray {
    repeated OrderRecord orderRecords = 1;
    OrderPaginationInfo paginationInfo = 2;
}

message BackOrderRecordArray {
    repeated BackOrderRecord backOrderRecords = 1;
    OrderPaginationInfo paginationInfo = 2;
}

message ClosePositionRequest {
    string exchangeCode = 1;
    string contractCode = 2;
    Side side = 3;
    int32 productType = 4;
}

message ClosePositionResponse {
    string exchangeCode = 1;
    string contractCode = 2;
    Side side = 3;
    double positionQty = 4;
    double profit = 5;
}

message CloseAllPositionRequest {
    string custNumber = 1;
    repeated ClosePositionRequest closePositionRequests = 2;
}

message CloseAllPositionResponse {
    string custNumber = 1;
    repeated ClosePositionResponse closePositionResponses = 2;
}

message OrderCancelRequest {
    Order order = 1;
    int32 productType = 2;
}

message OrderCancelResponse {
    string message = 1;
}

message EquityRequest {
    string custNumber = 1;
}

message EquityResponse {
    string custNumber = 1;
    double equity = 2;
}

message MonitorFundsRequest {
    string custNumber = 1;
    string directUpline = 2;
}

message MonitorFundsResponse {
    repeated MemberFund memberSumFunds = 1;
    repeated MemberFund memberFunds = 2;
}

message MemberFund {
    string custNumber = 1;
    string custNumberName = 2;
    double selfPaidMargin = 3;
    double leverageMargin = 4;
    double unrealizedProfit = 5;
    double stopLossLevel = 7;
    double warningLevel = 8;
    string directUpline = 9;
    string wallet = 10;
    int64 warningTime = 11;
    string phone = 12;
    string riskLevel = 13;
    string userId = 14;
    string riskMsg = 15;
    string productCode = 16;
    string exchangeCode = 17;
    int32 productType = 18;
    Side side = 19;
    double positionQty = 20;

}

message ForceCloseUsersAllPositionRequest {
    string operator = 1;
    repeated string custNumbers = 2;
}

message ForceCloseUserPositionsRequest {
    string operator = 1;
    string custNumber = 2;
    repeated ClosePositionRequest closePositionRequests = 3;
}

message ClosePositionsResponse {
    string custNumber = 1;
    string exchangeCode = 2;
    string contractCode = 3;
    Side side = 4;
    string ErrorMessage = 5;
    int64 ErrorTime = 6;
}

message ForceClosePositionsResponse {
    repeated ClosePositionsResponse response = 1;
}

message OrdersCancelRequest {
    string operator = 1;
    repeated string clOrderIds = 2;
}

message RiskRecordRequest {
    repeated string operators = 1;
    repeated string accounts = 2;
    repeated string productCodes = 3;
    repeated int32 productTypes = 4;
    repeated RiskAction actions = 5;
    string dateStart = 6;
    string dateEnd = 7;
    string orderBy = 8;
    string orderDirection = 9;
    OrderPagination pagination = 10;
    Compare closeProfit = 11;
}

message RiskRecords {
    repeated RiskRecord riskRecords = 1;
    OrderPaginationInfo paginationInfo = 2;
}

message RiskRecord {
    int64 createdAt = 1;
    string account = 2;
    int32 productType = 3;
    string productCode = 4;
    string avgOpenPrice = 5;
    string closeQuote = 6;
    string positionQty = 7;
    string beforeWallet = 8;
    string selfPaidMargin = 9;
    string closeProfit = 10;
    string afterWallet = 11;
    string riskLevel = 12;
    RiskAction action = 13;
    string clOrderId = 14;
    string operator = 15;

    string upline = 16;
    string contact = 17;
    string userId = 18;
    string name = 19;
    Side side = 20;
}

message PositionLossInfo {
    string contractCode = 1;
    double openPrice = 2;
    double averagePrice = 3;
    double latestQuote = 4;
    double netPositions = 5;
    double unrealizedProfit = 6;
    int32 memberWithPosition = 7;
    int32 productType = 8;
    string productName = 9;
    string exchangeCode = 10;
}

message PositionLossRankRequest {
    int32 productType = 1;
    string contractCode = 2;
}

message PositionLossRankResponse {
    repeated PositionLossInfo info = 1;
}

message AddRiskRecordResponse {
    string message = 1;
}

message GetOrderDashboardRequest {
    int64 startTime = 1;
    int64 endTime = 2;
    OrderDashboardSearchType searchType = 3;
}

message GetOrderDashboardResponse {
    string startDate = 1;
    string endDate = 2;
    repeated OrderSumInfo orderSumInfo = 3;
}

message OrderSumInfo {
    string date = 1;
    string  turnover = 2;
    string  totalQuantity = 3;
    int64 distinctMemCount = 4;
    int64 orderAmount = 5;
}

message GetInterestFeeDashboardRequest {
    int64 startTime = 1;
    int64 endTime = 2;
    OrderDashboardSearchType searchType = 3;
}

message GetInterestFeeDashboardResponse {
    string startDate = 1;
    string endDate = 2;
    repeated InterestFeeInfo interestFeeInfo = 3;
}

message InterestFeeInfo {
    // TODO: design total interest and fee of every day struct format (for SP31)
    string date = 1;
    double interest = 2;
    double fee = 3;
}

message GetSumOfPositionOpenInterestGroupByAccountRequest {
}

message GetSumOfPositionOpenInterestGroupByAccountResponse {
    repeated SumOfPositionOpenInterest sumOfPositionOpenInterest = 1;
}

message SumOfPositionOpenInterest {
    string account = 1;
    double positionOpenInterest = 2;
}

message GetAllOrderIdRequest {
    string message = 1;
}

message GetAllOrderIdResponse {
    repeated string clOrderIds = 1;
    repeated string sysOrderIds = 2;
}

message GetUnrealizedProfitReq {
    string account = 1;
    string product = 2;
    TimeInterval interval = 3;
}

message UnrealizedProductArray {
    string account = 1;
    repeated UnrealizedProduct unrealizedProductArray = 2;
}

message UnrealizedProduct {
    string product = 1;
    repeated UnrealizedProfit profit = 2;
}

message UnrealizedProfit {
    string time = 1;
    double value = 2;
}

message GetDailyProfitReq {
    string account = 1;
    TimeInterval interval = 2;
}

message DailyProfitArray {
    string account = 1;
    repeated DailyProfit profit = 2;
}

message DailyProfit {
    string time = 1;
    double value = 2;
}

message PostingRequest {
    repeated string custNumbers = 1;
    int64 dateStart = 2;
    int64 dateEnd = 3;
    repeated string orderBy = 4;
    repeated string orderDirection = 5;
    OrderPagination pagination = 6;
    Compare wallet = 7;
    Compare riskDegree = 8;
    Compare marginCall = 9;

}

message PostingResponse {
    repeated Posting postingRecords = 1;
    OrderPaginationInfo paginationInfo = 2;
}

message Posting {
    string custNumber = 1;
    string custNumberName = 2;
    string balanceBefore = 3;
    string deposit = 4;
    string withdraw = 5;
    string realizedProfit = 6;
    string unrealizedProfit = 7;
    string commissionFee = 8;
    string tax = 9;
    string balanceAfter = 10;
    string equity = 11;
    string selfPaidMargin = 12;
    string leverageMargin = 13;
    string wallet = 14;
    string riskDegree = 15;
    string marginCall = 16;
    string initialMargin = 17;
    int64 createdAt = 18;
    string userId = 19;
    string totalPNL = 20;
}

message ClientOverviewRequest {
}

message ClientOverviewResponse {
    repeated ClientOverview clientOverviews = 1;
}

message ClientOverview{
    string account = 1;
    string userId = 2;
    string equity = 3;
    string wallet = 4;
    string totalPnl = 5;
    string closeProfit = 6;
    string floatingProfit = 7;
    string totalDeposit = 8;
    string totalWithdraw = 9;
    string totalBonus = 10;
    string withdrawBonus = 11;
    string selfPaidMargin = 12;
    string marginLevel = 13;
    string commissionFee = 14;
    string interest = 15;
}

message GetAccountEquityInfoReq {
    string account = 1;
}

message AccountEquityInfo {
    string wallet = 1;
    string selfPaidMargin = 2;
    string leverageMargin = 3;
    string todayRealizedProfit = 4;
    string bonus = 5;
    string creditForLoad = 6;
    string withdrawBalance = 7;
}

message Compare {
    int64 activate = 1;
    string term = 2;
    repeated CompareItem compareArrs = 3;
    string ANDOR = 4;
}

message CompareItem {
    int64 activate = 1;
    string type = 2;
    double value = 3;
}

message GetAccountOrderInfoReq {
    string account = 1;
}

message AccountOrderInfo {
    string balanceBefore = 1;
    string commissionFee = 2;
    string realizedProfit = 3;
    string withdraw = 4;
    string deposit = 5;
    string equity = 7;
    string selfPaidMargin = 8;
    string leverageMargin = 9;
    string balance = 10;
}

message GetOrderNotificationReq {
    string account = 1;
}

message OrderNotificationArray {
    repeated OrderNotification orderNotificationArray = 1;
}

message OrderNotification {
    string clOrderId = 1;
    string exchangeCode = 2;
    string contractCode = 3;
    Side side = 4;
    OpenClose openClose = 5;
    OrderType orderType = 6;
    string orderPrice = 7;
    string orderQty = 8;
    string commitPrice = 9;
    string commitQty = 10;
    int32 notificationType = 11;
    int32 productType = 12;
    string orderFracSize = 13;
    bool fracShareFlag = 14;
    int64 time = 15;
    bool readOrNot = 16;
    int32 stopLossTakeProfit = 17;
}

message ReadOrderNotificationReq {
    string account = 1;
    OrderNotification notification = 2;
}

message ReadOrderNotificationResponse {
}

message ReadAllOrderNotificationReq {
    string account = 1;
}

message ReadAllOrderNotificationResponse {

}

message GetReportReq {
    string startTime = 1;
    string endTime = 2;
    string account = 3;
}

message GetReportResponse {
    Report itself = 1;
    repeated Report downlines = 2;
}

message Report {
    string account = 1;
    string name = 2;
    string role = 3;

    double totalTurnover = 4;
    double totalProfit = 5;
    double totalFee = 6;
    double totalTradeTax = 7;
    double totalInterest = 8;

    double profit = 9;
    double fee = 10;
    double tradeTax = 11;
    double interest = 12;

    double downlineProfit = 13;
    double downlineFee = 14;
    double downlineTradeTax = 15;
    double downlineInterest = 16;

    double uplineMinProfit = 17;
    double uplineProfit = 18;
    double uplineFee = 19;
    double uplineTradeTax = 20;
    double uplineInterest = 21;

    double canNotHandle = 22;
    string date = 23;
    string userId = 24;
}

message OrderEmpty {

}

message CheckFirstOrderRequest {
    string account = 1;
}

message CheckFirstOrderResponse {
    bool firstOrder = 1;
}

message GetCloseProfitSumInfoReq {
    int64 startTime = 1;
    int64 endTime = 2;
}

message GetCloseProfitSumInfoResponse {
    double futuresCloseProfit = 1;
    double stockCloseProfit = 2;
    double cryptoCloseProfit = 3;
    double forexCloseProfit = 4;
}

message CryptoOrderRequest {
    string custNumber = 1;
    string exchangeCode = 2;
    string productCode = 3;
    Side side = 4;
    OpenClose openClose = 5;
    OrderType orderType = 6;
    string orderPrice = 7;
    string orderQty = 8;
    int32 stopLossFlag = 17;
    string stopLossPrice = 12;
    string gainProfitPrice = 13;
    TimeInForce timeInForce = 9;
    string ip = 10;
    string clOrderId = 11;
    int32 leverage = 14;
    int32 stopLossTakeProfit = 18;
}

message CryptoOrderResponse {
    string profit = 1;
    string closePrice = 2;
}

message ForexOrderRequest {
    string custNumber = 1;
    string exchangeCode = 2;
    string productCode = 3;
    Side side = 4;
    OpenClose openClose = 5;
    OrderType orderType = 6;
    string orderPrice = 7;
    string orderQty = 8;
    int32 stopLossFlag = 17;
    string stopLossPrice = 12;
    string gainProfitPrice = 13;
    TimeInForce timeInForce = 9;
    string ip = 10;
    string clOrderId = 11;
    int32 leverage = 14;
    int32 stopLossTakeProfit =18;
}

message ForexOrderResponse {
    string profit = 1;
    string closePrice = 2;
}

message StockOrderRequest {
    string custNumber = 1;
    string exchangeCode = 2;
    string productCode = 3;
    Side side = 4;
    OpenClose openClose = 5;
    OrderType orderType = 6;
    string orderPrice = 7;
    string orderQty = 8;
    int32 stopLossFlag = 17;
    string stopLossPrice = 12;
    string gainProfitPrice = 13;
    TimeInForce timeInForce = 9;
    string ip = 10;
    string clOrderId = 11;
    string orderFracSize = 14;
    bool fracShareFlag = 15;
    int32 leverage = 16;
    int32 stopLossTakeProfit = 18;
}

message StockOrderResponse {
    string profit = 1;
    string closePrice = 2;
}

message GetLossRankMemberPositionRequest {
    int32 productType = 1;
    string contractCode = 2;
}

message GetLossRankMemberPositionResponse {
    repeated LossRankMemberPosition positions = 1;
}

message LossRankMemberPosition {
    string account = 1;
    string userId = 2;
    double openPositionPrice = 3;
    double latestQuote = 4;
    double positionQty = 5;
    Side side = 6;
    double unrealizedProfit = 7;
}

message SetBonusIntoPositionReq {
    string account = 1;
    string exchangeCode = 2;
    string productCode = 3;
    string rewardQuantity = 4;
    string rewardValue = 5;
}

message SetBonusIntoPositionRes {
}

message GetBonusReq {
    string account = 1;
}

message GetBonusRes {
    repeated Bonus bonuses = 1;
}

message Bonus {
    int32 productType = 1;
    string exchangeCode = 2;
    string productCode = 3;
    Side side = 4;
    double positionQty = 5;
    double rewardValue = 6;
    int64 availableTime = 7;
}

message CancelOrderInterReq {
    string ClOrderID = 1;
    int32 Status = 2 ;
    string Price = 3;
    string Qty = 4;
    string FracSize = 5;
    bool FracShareFlag = 6;
    int32 Action = 7;
    int32 ProductType = 8;
}

message CloseOrderReq {
    string  ClOrderID = 1;
    string ClosePrice = 2;
    string OpenPrice = 3;
    string CloseAmount = 4;
    int32 Leverage = 5;
    int32 Status = 6;
    int32 FracShareFlag = 7;
    string OrderFracSize = 8;
    int32 ProductType = 9;
}

message RiskClosePositionRequest {
    string custNumber = 1;
    string operator = 2;
    repeated ClosePositionRequest closePositionRequests = 3;
}

message RiskClosePositionResponse {
    string custNumber = 1;
    repeated ClosePositionResponse closePositionResponses = 2;
}

message CalculateReportReq {
    string dateStart = 1;
    string dateEnd = 2;
    bool companyTakeAll = 3;
}

message CalculateReportRes {
    string message = 1;
}

message GetWithdrawConditionInfoReq {
    string account = 1;
}

message GetWithdrawConditionInfoRes {
    double selfPaidMargin = 1;
    double profit = 2;
    double guarantee = 3;
}

message CloseMITOrderReq {
    string account = 1;
    string exchangeCode = 2;
    string productCode = 3;
    Side side = 4;
    int32 productType = 5;
    int32 stopLossTakeProfit = 6;
}

message CloseOrderRes {
    string profit = 1;
    string closePrice = 2;
}

message PositionIndex{
    string account = 1;
    string productCode = 2;
    string side = 3;
}

service OrderService {
    rpc CreateFuturesOrder(FuturesOrderRequest) returns (FuturesOrderResponse) {};
    rpc CreateCryptoOrder(CryptoOrderRequest) returns (CryptoOrderResponse) {};
    rpc CreateForexOrder(ForexOrderRequest) returns (ForexOrderResponse) {};
    rpc CreateStockOrder(StockOrderRequest) returns (StockOrderResponse) {};
    rpc CancelOrderInter(CancelOrderInterReq) returns (OrderEmpty) {};
    rpc CloseOrder(CloseOrderReq) returns (CloseOrderRes) {};


    rpc GetAccountPosition(AccountPositionRequest) returns (AccountPositionResponse) {};
    rpc QueryOrder(QueryOrderRequest) returns (QueryOrderResponse) {};
    rpc QueryOrderRecord(OrderRecordRequest) returns (OrderRecordArray) {};
    rpc BackQueryOrderRecord(OrderRecordRequest) returns (BackOrderRecordArray) {};
    rpc QueryPosition(PositionRequest) returns (PositionArray) {};
    rpc BackQueryPosition(PositionRequest) returns (BackPositionArray) {};
    rpc ModifyPositionStopLoss(ModifyPositionStopLossRequest) returns (ModifyPositionStopLossResponse) {};
    rpc CloseAllPosition(CloseAllPositionRequest) returns (CloseAllPositionResponse) {};
    rpc ForceCloseMembersAllPosition(ForceCloseUsersAllPositionRequest) returns (ForceClosePositionsResponse) {};
    rpc ForceCloseMemberPositions(ForceCloseUserPositionsRequest) returns (ForceClosePositionsResponse) {};
    rpc ModifyOrder(Order) returns (OrderEmpty) {};
    rpc CancelOrder(OrderCancelRequest) returns (OrderCancelResponse) {};
    rpc CancelOrders(OrdersCancelRequest) returns (OrderEmpty) {};
    rpc GetEquity(EquityRequest) returns (EquityResponse) {};
    rpc MonitorFunds(MonitorFundsRequest) returns (MonitorFundsResponse) {};
    rpc GetPositionLossRank(PositionLossRankRequest) returns (PositionLossRankResponse);
    rpc GetRiskRecord(RiskRecordRequest) returns (RiskRecords) {};
    rpc AddRiskRecord(RiskRecord) returns (AddRiskRecordResponse) {};

    rpc GetOrderDashboard(GetOrderDashboardRequest) returns (GetOrderDashboardResponse) {};
    rpc GetInterestFeeDashboard(GetInterestFeeDashboardRequest) returns (GetInterestFeeDashboardResponse) {};
    rpc GetSumOfPositionOpenInterestGroupByAccount(GetSumOfPositionOpenInterestGroupByAccountRequest) returns (GetSumOfPositionOpenInterestGroupByAccountResponse) {};

    rpc GetAllOrderId(GetAllOrderIdRequest) returns (GetAllOrderIdResponse) {};

    rpc GetAccountEquityInfo(GetAccountEquityInfoReq) returns (AccountEquityInfo) {};
    rpc GetUnrealizedProfit(GetUnrealizedProfitReq) returns (UnrealizedProductArray) {};
    rpc GetPosting(PostingRequest) returns (PostingResponse) {};
    rpc GetDailyProfit(GetDailyProfitReq) returns (DailyProfitArray) {};
    rpc GetClientOverview(ClientOverviewRequest) returns (ClientOverviewResponse) {};

    rpc GetAccountOrderInfo(GetAccountOrderInfoReq) returns (AccountOrderInfo) {};
    rpc GetOrderNotification(GetOrderNotificationReq) returns (OrderNotificationArray) {};
    rpc ReadOrderNotification(ReadOrderNotificationReq) returns (ReadOrderNotificationResponse) {};

    rpc ReadAllOrderNotification(ReadAllOrderNotificationReq) returns (ReadAllOrderNotificationResponse) {};

    rpc GetReport(GetReportReq) returns (GetReportResponse) {};

    rpc SetBonusIntoPosition(SetBonusIntoPositionReq) returns (SetBonusIntoPositionRes) {};

    rpc CheckFirstOrder(CheckFirstOrderRequest) returns (CheckFirstOrderResponse) {};

    rpc GetCloseProfitSumInfo(GetCloseProfitSumInfoReq) returns (GetCloseProfitSumInfoResponse) {};

    rpc QueryCryptoOrderRecord(OrderRecordRequest) returns (OrderRecordArray) {};

    rpc GetLossRankMemberPosition(GetLossRankMemberPositionRequest) returns (GetLossRankMemberPositionResponse) {};
    rpc GetBonus(GetBonusReq) returns (GetBonusRes) {};
    rpc RiskClosePosition(RiskClosePositionRequest) returns (RiskClosePositionResponse) {};

    rpc CalculateReport(CalculateReportReq) returns (CalculateReportRes) {};
    rpc GetWithdrawConditionInfo(GetWithdrawConditionInfoReq) returns (GetWithdrawConditionInfoRes) {};
    rpc CloseMITOrder(CloseMITOrderReq) returns (OrderEmpty) {};
}