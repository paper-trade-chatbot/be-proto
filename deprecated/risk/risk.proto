syntax = "proto3";
option go_package = "models/risk";


enum RiskDashboardSearchType {
  RISKDASHBOARDSEARCHTYPE_NONE = 0;
  RISKDASHBOARDSEARCHTYPE_DAILY = 1;
  RISKDASHBOARDSEARCHTYPE_WEEKLY = 2;
  RISKDASHBOARDSEARCHTYPE_MONTHLY = 3;
  RISKDASHBOARDSEARCHTYPE_UNLIMITED = 4;
}

message GetRiskNotifyRecordReq {
  string custNumber = 1;
  int64 createdAtAfter = 2;
}

message GetRiskNotifyRecordRes {
  repeated RiskNotifyRecord riskRecords = 1;
}

message RiskNotifyRecord {
  string custNumber = 1;
  int32 notifyType = 2;
  double totalEquity = 3;
  double warningLevel = 4;
  double readyToStopLevel = 5;
  double stopLossLevel = 6;
  double warningAmount = 7;
  double readyToStopAmount = 8;
  double stopLossAmount = 9;
  int64 createdAt = 10;
  int64 id = 11;
}

message RiskAlterTickReq {
  string productId = 1;
  string buyPrice = 2;
  string sellPrice = 3;
  string closePrice = 4;
}

message RiskAlterTickRes {
}

message PositionMonitorReq{
  int32 productType = 1;
}
message PositionMonitorRes{
  repeated PositionMonitorInfo positions = 1;
}

message PositionMonitorInfo{
  string productCode = 1;
  string exchangeCode = 2;
  int32 productType = 3;
  double productLossLimit = 4;
  double avgPrice = 5;
  double latestPrice = 6;
  double hedgeProfit = 7;
  double positionQty = 8;
  int32 side = 15;
  double unrealizedProfit = 9;
  double productProfit = 10;
  double throughoutPositionQty = 11;
  double throughoutAvgPrice = 12;
  double throughoutUnrealizedProfit = 13;
  double throughoutAccumulateProfit = 14;
}

message PositionMonitorThroughoutReq{
  string productCode = 1;
  string exchangeCode = 2;
  int32 productType = 3;
  string operator = 4;
}

message PositionMonitorThroughoutRes{

}

message GetThroughoutRecordReq{
  int64 dateStart = 1;
  int64 dateEnd = 2;
  repeated string orderBy = 3;
  repeated string orderDirection = 4;
  RiskPagination pagination = 5;
  repeated string productCodes = 6;
  repeated int32 productTypes = 7;
  repeated string operators = 8;

}

message GetThroughoutRecordRes{
  repeated ThroughoutRecord records = 1;
  RiskPaginationInfo paginationInfo = 2;
}

message ModifyThroughoutRecordReq{
  string recordId = 1;
  double throughoutPositionQty = 2;
  double throughoutAvgPrice = 3;
  string operator = 4;
}

message ModifyThroughoutRecordRes{

}


message ThroughoutRecord{
  string productCode = 1;
  string exchangeCode = 2;
  int32 productType = 3;
  double avgPrice = 5;
  double throughoutPositionQty = 11;
  double throughoutAvgPrice = 12;
  double throughoutLoss = 13;
  string recordId = 14;
  int64 createdAt = 15;
  int64 updatedAt = 16;
  string operator = 17;
}

message GetThroughoutDetailRecordReq{
  string recordId = 1;
}

message GetThroughoutDetailRecordRes{
    repeated ThroughoutRecord records = 1;
}

message RiskPagination {
  int32 page = 1;
  int32 pageSize = 2;
}

message RiskPaginationInfo {
  int32 currentPage = 1;
  int32 nextPage = 2 ;
  int32 previousPage = 3;
  int32 totalPages = 4;
  int32 totalRows = 5;
}

message DeleteThroughoutRecordReq{
  string recordId = 1;
  string operator = 2;
}

message DeleteThroughoutRecordRes{

}

message SetRealizedProfitReq{
  string ExchangeCode = 1;
  string productCode = 2;
  int32 productType = 3;
  string todayRealizedProfit = 4;
  string closePrice = 5;
  string previousCloseAmount = 6;
  int32 side = 7;
}

message SetRealizedProfitRes{
  string message = 1;
}

enum BookType {
  BOOKTYPE_NONE = 0;
  BOOKTYPE_A = 1;
  BOOKTYPE_B = 2;
}

message GetABBookReq{
  int64 dateStart = 1;
  int64 dateEnd = 2;
  BookType bookType = 3;
  repeated string orderBy = 4;
  repeated string orderDirection = 5;
  RiskPagination pagination = 6;
  bool paginationFlag = 7;
}

message GetABBookRes{
  repeated BookInfo bookInfo = 1;
  RiskPaginationInfo paginationInfo = 2;
  BookInfo sumInfo = 3;
}

message BookInfo{
  string exchangeCode = 1;
  int32 productType = 2;
  string productCode = 3;
  string netPosition = 4;
  string buyPosition = 5;
  string sellPosition = 6;
  string grossPosition = 7;
  string netExposure = 8;
  string latestQuote = 9;
  string contract = 10;
  string exchangeRate = 11;
  string eodPrice = 12;
  string hedgePNL = 13;
  string previousFloatingPNL = 14;
  string todayFloatingPNL = 15;
  string previousRealizedPNL = 16;
  string todayRealizedPNL = 17;
  string floatingPNL = 18;
  string realizedPNL = 19;
  string totalPNL = 20;
  int64 createdAt = 21;
}

message GetABBookSumReq{
  int64 dateStart = 1;
  int64 dateEnd = 2;
  BookType bookType = 3;
}

message GetABBookSumRes{
  repeated BookSumInfo bookInfo = 1;
  BookSumInfo sumInfo = 2;
}

message BookSumInfo{
  string hedgePNL = 13;
  string previousFloatingPNL = 14;
  string todayFloatingPNL = 15;
  string previousRealizedPNL = 16;
  string todayRealizedPNL = 17;
  string floatingPNL = 18;
  string realizedPNL = 19;
  string totalPNL = 20;
  int64 createdAt = 21;
}

message GetABBookRecordReq{
  int64 dateStart = 1;
  int64 dateEnd = 2;
  BookType bookType = 3;
}

message GetABBookRecordRes{
  repeated BookInfo bookInfo = 1;
  BookInfo sumInfo = 2;
}

message GetBookDashboardRequest {
    int64 startTime = 1;
    int64 endTime = 2;
    RiskDashboardSearchType searchType = 3;
}

message GetBookDashboardResponse {
    string startDate = 1;
    string endDate = 2;
    repeated BookDashboardInfo bookDashboardInfo = 3;
}

message BookDashboardInfo{
    string date = 1;
    string ABookTotalPNL    = 2;
    string BBookTotalPNL    = 3;
    string BBookNetExposure = 4;
}

service RiskService{
  rpc GetRiskNotifyRecord(GetRiskNotifyRecordReq) returns (GetRiskNotifyRecordRes) {};
  rpc RiskAlterTick(RiskAlterTickReq) returns (RiskAlterTickRes) {};

  rpc PositionMonitor(PositionMonitorReq) returns (PositionMonitorRes){};
  rpc PositionMonitorThroughout(PositionMonitorThroughoutReq) returns (PositionMonitorThroughoutRes){};

  rpc GetThroughoutRecord(GetThroughoutRecordReq) returns (GetThroughoutRecordRes){};
  rpc GetThroughoutDetailRecord(GetThroughoutDetailRecordReq) returns (GetThroughoutDetailRecordRes){};
  rpc ModifyThroughoutRecord(ModifyThroughoutRecordReq) returns (ModifyThroughoutRecordRes){};
  rpc DeleteThroughoutRecord(DeleteThroughoutRecordReq) returns (DeleteThroughoutRecordRes){};

  rpc SetRealizedProfit(SetRealizedProfitReq) returns (SetRealizedProfitRes){};

  rpc GetABBook(GetABBookReq) returns (GetABBookRes){};

  rpc GetABBookSum(GetABBookSumReq) returns (GetABBookSumRes){};

  rpc GetBookDashboard(GetBookDashboardRequest) returns (GetBookDashboardResponse){};
}