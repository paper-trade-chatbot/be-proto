syntax = "proto3";
option go_package = "models/warehouse";

message GetExtremesReq {
    repeated string symbols = 1;
}

message GetExtremesRes {
    repeated Extreme extremes = 1;
}

message Extreme {
    string exchangeID = 1;
    string symbolID = 2;
    double high = 3;
    double low = 4;
}

message GetCandlesReq {
    string exchangeID = 1;
    string symbolID = 2;
    string intervalID = 3;
    int32 day = 4;
    int64 startTime = 5;
    int64 endTime = 6;
    repeated string exchangeIDIn = 7;
    repeated string symbolIDIn = 8;
    string orderBy = 9;
    string orderDirection = 10;
    int32 limit = 11;
    bool isRecursive = 12;
    bool vwapRequired = 13;
}

message GetCandlesRes {
    repeated Candle candles = 1;
}

message Candle {
    string exchangeCode = 1;
    string symbol = 2;
    string intervalID = 3;
    int64 start = 4;
    double open = 5;
    double close = 6;
    double high = 7;
    double low = 8;
    double quantity = 9;
    double vwap = 10; // Volume Weighted Average Price
}

message GetTodayLiveChartReq {
    repeated string productCodes = 1;
}

message GetTodayLiveChartRes {
    repeated TodayLiveChart todayLiveCharts = 1;
}

message TodayLiveChart {
    string exchangeCode = 1;
    string productCode = 2;
    repeated Data data = 3;
    int64 startTime = 4;
    int64 endTime = 5;
    int64 nextStartTime = 7;
    int64 nextEndTime = 8;
    int64 timeZone = 6;
}

message Data {
    int64 time = 1;
    double value = 2;
}

message GetVendorListReq {}

message GetVendorListRes {
    repeated VendorProductTypeList vendorProductTypeList = 1;
}

enum WarehouseProductType {
    PRODUCT_NONE = 0;
    FUTURES = 1;
    STOCK = 2;
    CRYPTO = 3;
    FOREX = 4;
}

message VendorProductTypeList {
    WarehouseProductType productType = 1;
    repeated VendorList vendorList = 2;
}
 

message VendorList {
    repeated VendorDetail vendorDetails = 1;
    string vendorName = 2;
    string note = 3;
    string contact = 4;
    string email = 5;
    string phoneNumber = 6;
    string apiDocument = 7;
    string account = 8;
    string password = 9;
    string projectId = 10;
    string cipherKey = 11;
}

message VendorDetail {
    string exchangeCode = 3;
    bool isHidden = 4;
}

message ModifyVendorDetailReq {
    string vendorName = 1;
    string contact = 2;
    string email = 3;
    string phoneNumber = 4;
    string apiDocument = 5;
    string account = 6;
    string password = 7;
    string projectId = 8;
    string cipherKey = 9;
    string note = 10;
}

message ModifyVendorDetailRes {}

message GetVendorStatusReq {
    string vendorName = 1;
    string exchangeCode = 2;
}

message GetVendorStatusRes {
    bool isHidden = 1;
}

message ModifyVendorStatusReq {
    string vendorName = 1;
    string exchangeCode = 2;
    bool isHidden = 3;
}

message ModifyVendorStatusRes {}

message NewSymbol {
    string symbol = 1;
    int32 category = 2;
    bool newExchangeFlag = 3;
    string exchangeCode = 4;
    string exchangeName = 8;
    string countryCode = 9;
    float timezone = 10;
    string exchangeTime = 11;
    string location = 12;
    bool newVendorFlag = 5;
    string vendorName = 6;
}

message CreateNewProductRes {}

service WarehouseService{
    rpc GetExtremes(GetExtremesReq) returns (GetExtremesRes) {};
    rpc GetCandles(GetCandlesReq) returns (GetCandlesRes) {};
    rpc GetTodayLiveChart(GetTodayLiveChartReq) returns (GetTodayLiveChartRes) {};
    rpc GetVendorList(GetVendorListReq) returns (GetVendorListRes) {};
    rpc ModifyVendorDetail(ModifyVendorDetailReq) returns (ModifyVendorDetailRes) {};
    rpc GetVendorStatus(GetVendorStatusReq) returns (GetVendorStatusRes) {};
    rpc ModifyVendorStatus(ModifyVendorStatusReq) returns (ModifyVendorStatusRes) {};
    rpc CreateNewProduct(NewSymbol) returns (CreateNewProductRes) {}
}